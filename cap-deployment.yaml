---
# Source: javasample/charts/srv/templates/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: javasample-srv
  labels:
    helm.sh/revision: "1"
    helm.sh/chart: srv-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: srv
    app.kubernetes.io/instance: javasample
spec:
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: istio-ingressgateway
      namespaceSelector: {}
  podSelector:
    matchLabels:
      app.kubernetes.io/name: srv
      app.kubernetes.io/instance: javasample
  policyTypes:
  - Ingress
---
# Source: javasample/charts/srv/templates/pod-disruption-budget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: javasample-srv
  labels:
    helm.sh/revision: "1"
    helm.sh/chart: srv-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: srv
    app.kubernetes.io/instance: javasample
spec:
  maxUnavailable: 10%
  selector:
    matchLabels:
      app.kubernetes.io/name: srv
      app.kubernetes.io/instance: javasample
---
# Source: javasample/charts/srv/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: javasample-srv
  labels:
    helm.sh/revision: "1"
    helm.sh/chart: srv-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: srv
    app.kubernetes.io/instance: javasample
spec:
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: srv
    app.kubernetes.io/instance: javasample
---
# Source: javasample/charts/srv/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/revision: "1"
    helm.sh/chart: srv-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: srv
    app.kubernetes.io/instance: javasample
  name: javasample-srv
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: srv
      app.kubernetes.io/instance: javasample
  template:
    metadata:
      labels:
        app.kubernetes.io/name: srv
        app.kubernetes.io/instance: javasample
    spec:
      imagePullSecrets:
        - name: container-registry
      automountServiceAccountToken: false
      serviceAccountName: default
      containers:
      - image: "index.docker.io/joedocker81/javasample-srv:latest"
        name: srv
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        envFrom:
        env:        
        - name: CDS_ENVIRONMENT_K8S_SERVICEBINDINGS_DB_SERVICE
          valueFrom:
            secretKeyRef:
              name: "bookshop-db"
              key: label
        - name: CDS_ENVIRONMENT_K8S_SERVICEBINDINGS_DB_PLAN
          valueFrom:
            secretKeyRef:
              name: "bookshop-db"
              key: plan
              optional: true
        - name: CDS_ENVIRONMENT_K8S_SERVICEBINDINGS_DB_SECRETSPATH
          value: /bindings/db
        - name: SPRING_PROFILES_ACTIVE
          value: "cloud"
        - name: SERVICE_BINDING_ROOT
          value: /bindings
        - name: PORT
          value: "8080"
        - name: TMPDIR
          value: /tmp
        livenessProbe:
          httpGet:
            path: /
            port: http
        readinessProbe:
          httpGet:
            path: /
            port: http
        startupProbe:
          httpGet:
            path: /
            port: http
          failureThreshold: 15
          periodSeconds: 2
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        
        - name: db-secret
          mountPath: /bindings/db
          readOnly: true
        resources:
          limits:
            cpu: 700m
            ephemeral-storage: 1G
            memory: 1G
          requests:
            cpu: 100m
            ephemeral-storage: 1G
            memory: 1G
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
      restartPolicy: Always
      securityContext:
        runAsNonRoot: true
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/name: srv
            app.kubernetes.io/instance: javasample
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
      volumes:
      - emptyDir: {}
        name: tmp
      
      - name: db-secret
        secret:
          secretName: "bookshop-db"
---
# Source: javasample/charts/srv/templates/api-rule.yaml
apiVersion: gateway.kyma-project.io/v1alpha1
kind: APIRule
metadata:
  name: javasample-srv
  labels:
    helm.sh/revision: "1"
    helm.sh/chart: srv-0.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: srv
    app.kubernetes.io/instance: javasample
spec:
  gateway: kyma-gateway.kyma-system.svc.cluster.local
  rules:
  - accessStrategies:
    - handler: allow
    methods:
    - GET
    - POST
    - PUT
    - PATCH
    - DELETE
    - HEAD
    path: /.*
  service:
    host: javasample-srv-capsample
    name: javasample-srv
    port: 8080
---
# Source: javasample/templates/hana-deployer-job.yaml
#
# HANA single-tenant DB deployment
#
apiVersion: batch/v1
kind: Job
metadata:
  name: javasample-hana-deployer
  labels:
    helm.sh/chart: javasample-1.0.0-SNAPSHOT
    app.kubernetes.io/name: hana-deployer
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: javasample
    app.kubernetes.io/version: 1.0.0-SNAPSHOT
  annotations:
    "helm.sh/hook": "post-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  namespace: capsample
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        helm.sh/chart: javasample-1.0.0-SNAPSHOT
        app.kubernetes.io/name: hana-deployer
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/instance: javasample
        app.kubernetes.io/version: 1.0.0-SNAPSHOT
        sidecar.istio.io/inject: "false"
    spec:
      restartPolicy: Never
      
      imagePullSecrets:
      - name: "container-registry"
      volumes:
          
          - name: hana-secret
            secret:
              secretName: "bookshop-db"
      containers:
      - name: hana-deployer
        image: index.docker.io/joedocker81/javasample-hana-deployer:latest
        imagePullPolicy: Always
        env:
        - name: EXIT
          value: 'true'
        volumeMounts:
          
          - name: hana-secret
            mountPath: /etc/secrets/sapcp/hana/hana
            readOnly: true
